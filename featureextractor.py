# -*- coding: utf-8 -*-
"""CAE_CLASSIFIER_RADIOMICS_BIGDATASET.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yNA_c1Y9Gx9r1Hf5oCYiqHGm7InqHqOU

#In questo notebook si allena nuovamente la rete che prende in input l'immagine e le feature con pyradiomics, ma in aggiunta si utilizza un dataset molto ampio di immagini DICOM le cui dimensioni delle singole immagini sono molto grandi. Dopo aver preparato i dati grazie ai codici allegati, si adottano strategie per non esaurire la ram disponibile. Per il fatto che colab hai dei limiti sulla memoria allocabile durante il training, le immagini vengono anche riscalate nel generatore.
"""

import os
import glob
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import sys
import pickle
import SimpleITK as sitk
import radiomics
import re
import time
import pickle
from functools import partial
import radiomics
from radiomics import featureextractor
sys.path.append('C:/Users/pensa/Desktop/CAE-for-DM-segmentation/functioncae')
from caehelper import *


##
if __name__ == '__main__':

    datapath='E:'
    maindir='Mass_data'
    mass_train='Train_data'
    mass_test='Test_data'
    mask_train='Train_data_masks'
    mask_test='Test_data_masks'
    benign_label='BENIGN'
    malign_label='MALIGNANT'
    features_path='feats'

    path_mass_tr=os.path.join(datapath,maindir,mass_train)
    path_masks_tr=os.path.join(datapath,maindir,mask_train)




    X_big_train,Y_big_train,Class_big_train=read_dataset_big(path_mass_tr
    ,path_masks_tr,benign_label,malign_label,resize=False)




    ##
    """#Pyradiomics on big dataset"""

    endpath_tr=os.path.join(datapath,maindir,features_path)
    if not os.path.exists(endpath_tr):
        os.makedirs(endpath_tr)
##


    """Questa funzione serve per estrarre le feature in multiprocessing e aggiungerle a un dizionario"""





    extractor = featureextractor.RadiomicsFeatureExtractor()


    biggy=[[X_big_train[i],Y_big_train[i]] for i in range(len(X_big_train))]
    #biggy_test=[[X_big_test[i],Y_big_test[i]] for i in range(len(X_big_test))]

    #
    ##

    nam=radiomic_dooer(biggy[2],path_mass_tr,endpath_tr,255,extractor)
    #radiomic_dooer=partial(radiomic_dooer1,datapath=path_mass_tr,endpath=endpath_tr,label=255,extrc=extractor)
    ##
    #this is the filename list for the multiprocessing

    for i,item in enumerate(biggy):
        name=radiomic_dooer(item,path_mass_tr,endpath_tr,255,extractor)
